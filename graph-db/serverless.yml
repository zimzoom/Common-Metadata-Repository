service: graphdb-indexer
frameworkVersion: '3'
provider:
  name: aws
  region: us-east-1
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}

  iam:
    role: IamRoleGraphLambdaExecution

  deploymentBucket:
   name: graphdb-driver-deployment-bucket-${self:provider.stage}
   skipPolicySetup: true

  # vpc:
  #   securityGroupIds:
  #     - ${cf:${self:provider.stage}.servicesSecurityGroupId}
  #   subnetIds: !Split [',', '${cf:${self:provider.stage}.subnetIds}']

  environment:
    CMR_ROOT: ${self:custom.variables.CMR_ROOT}
    # COLLECTION_INDEXING_QUEUE_URL:
    #   Ref: CollectionIndexingQueue
    ENVIRONMENT: ${self:custom.variables.ENVIRONMENT}
    GREMLIN_URL: ${self:custom.variables.GREMLIN_URL}
    PAGE_SIZE: ${self:custom.variables.PAGE_SIZE}

configValidationMode: error
plugins:
  - serverless-offline
  - serverless-webpack

functions:
  bootstrapGremlinServer:
    timeout: 900
    handler: serverless/src/bootstrapGremlinServer/handler.default

  indexCmrCollection:
    timeout: 20
    handler: serverless/src/indexCmrCollection/handler.default
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt:
              - CollectionIndexingQueue
              - Arn

  indexGeneric:
    timeout: 20
    handler: serverless/src/indexGeneric/handler.default

  indexACL:
    timeout: 20
    handler: serverless/src/indexACL/handler.default
    
  indexQueries:
    timeout: 20
    handler: serverless/src/indexQueries/handler.default

resources:
  Resources:
    CollectionIndexingQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        VisibilityTimeout: 300
        DelaySeconds: 5
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - CollectionIndexingQueueDeadLetterQueue
              - Arn
          maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

    SqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: topic-subscription-${self:custom.variables.CMR_CONCEPT_SNS_TOPIC}
              Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt CollectionIndexingQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${self:custom.variables.CMR_CONCEPT_SNS_TOPIC}
        Queues:
          - !Ref CollectionIndexingQueue

    CollectionIndexingQueueDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: graphdb-indexer-${self:provider.stage}-CollectionIndexingQueueDeadLetterQueue
        MessageRetentionPeriod: 1209600

    cmrSnsSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: ${self:custom.variables.CMR_CONCEPT_SNS_TOPIC}
        Endpoint: !GetAtt
          - CollectionIndexingQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'

    IamRoleGraphLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        RoleName: cmrGraphRole-${self:provider.stage}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        PermissionsBoundary:
          Fn::Join: [
            "", [
              "arn:aws:iam::",
              {
                "Ref": "AWS::AccountId"
              },
              ":policy/NGAPShRoleBoundary"
            ]
          ]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'

    cmrGraphPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - 'sqs:*'
              Effect: 'Allow'
              Resource: '*'
        PolicyName: cmrGraphPolicy-${self:provider.stage}
        Roles:
          - Ref: IamRoleGraphLambdaExecution

    cmrParamStorePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - 'ssm:GetParameter*'
                - 'secretsmanager:GetSecretValue'
              Effect: 'Allow'
              Resource:
                - 'arn:aws:ssm:*:*:parameter/${self:provider.stage}/graph-db/*'
                - 'arn:aws:ssm:*:*:parameter/${self:provider.stage}/graph-db/*'
        PolicyName: cmrParamStorePolicy-${self:provider.stage}
        Roles:
          - Ref: IamRoleGraphLambdaExecution
custom:
  variables:
    # Default values for environment variables
    CMR_CONCEPT_SNS_TOPIC: ${env:CMR_CONCEPT_SNS_TOPIC, ''}
    CMR_ROOT: ${env:CMR_ROOT, 'http://${cf:${self:provider.stage}.servicesDnsName}'}
    ENVIRONMENT: ${self:provider.stage}
    GREMLIN_URL: ${env:GREMLIN_URL, 'wss://${cf:neptune-${opt:stage}.DBClusterEndpoint}:8182/gremlin'}
    PAGE_SIZE: ${env:PAGE_SIZE, '1000'}
